{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","mivalor","state","ivapert","ivhigh","ivlow","ivclose","ivporc","imontodif","isubio","obj","_this2","Request","require","mipath","console","log","get","error","response","body","dir","mijson","JSON","parse","datos","prop","i","vapert","vhigh","vlow","vclose","vcloseant","vporc","montodif","subio","toFixed","parseFloat","text","setState","_this3","react_default","a","createElement","className","idf","nombre","map","el","type","onClick","mostrardato2","bind","value","key","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.567d677e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n\n\nclass App extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      ivapert:0,ivhigh:0,ivlow:0,ivclose:0,ivporc:0,imontodif: 0, isubio:true,\n    }\n    \n    var subio = true;\n    var i=0,vapert=0,vhigh=0,vlow=0,vclose=0,vcloseant=0,vporc=0,montodif= 0;\n  }\n\n  \n\nmivalor=0;\nmijson;\n  mostrardato2(obj) {\n  // aqui  deberia separar en una clase servicio en instanciar desde aqui. \n  var Request = require(\"request\");\n  const mipath=\"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=\"+obj+\"&outputsize=compact&apikey=X86NOH6II01P7R24\";\n  console.log(mipath);\n  Request.get(mipath, (error, response, body) => {\n    if(error) {\n        return console.dir(error);\n    }\n    this.mijson=JSON.parse(body);\n    var datos = this.mijson[\"Time Series (Daily)\"];\n    this.i=0;this.vapert=0;this.vhigh=0;this.vlow=0;this.vclose=0;this.vcloseant=0;this.vporc=0;this.montodif= 0;\n    for(var prop in datos) {\n      if(this.i===0){this.vapert=datos[prop][\"1. open\"];this.vhigh=datos[prop][\"2. high\"];\n      this.vlow=datos[prop][\"3. low\"];\n       this.vclose=datos[prop][\"4. close\"];this.i++;}\n       else{this.vcloseant = datos[prop][\"4. close\"]; break;}\n    }\n    \n    this.subio =this.vapert>this.vcloseant? true:false;\n\n    this.montodif  =(this.vapert - this.vclose).toFixed(2);\n    this.vporc=100 - ((this.vcloseant*100)/this.vapert); this.vporc =parseFloat(this.vporc).toFixed(2); \n    this.text=\"cambio\";\n    this.setState({ivapert:this.vapert,ivhigh:this.vhigh,ivlow:this.vlow,ivclose:this.vclose,ivporc:this.vporc,imontodif: this.montodif,isubio:this.subio});\n    console.log(this.ivapert +\" \"+this.state.ivapert);\n    console.log(obj);\n    //{1. open: \"1829.0000\", 2. high: \"1838.5800\", 3. low: \"1825.1900\", 4. close: \"1837.2800\", 5. volume: \"3640476\"}\n    \n});\n  \n    }\n\n  render() {\n    //se podria crear un componente e importarlo directamente\n    var classlista = [\n      {idf:'FB',nombre:'Facebook'},\n      {idf:'AAPL',nombre:'Apple'},\n      {idf:'MSFT',nombre:'Microsoft'},\n      {idf:'GOOGL',nombre:'Google'},\n      {idf:'AMZN',nombre:'Amazon'},\n    ];\n    //**************** */\n\n    ///****************** */\n    \n    return (\n     \n      <div className=\"App\">\n        <header className=\"App-header\">\n          <ul>\n          {\n        classlista.map(el => <li type=\"link\" onClick={this.mostrardato2.bind(this,el.idf)} value={el.idf} key={el.idf}> \n       <a href=\"#\"></a>{el.nombre }</li>\n        // >ver\n        )}  \n        </ul>\n        \n        <div className=\"App-body\">\n             {/* this.state.subio? <div className=\"App-verde\">:<div className=\"App-rojo\"> */}\n            <div>\n            <label> valor de apertura (open):</label><input value={this.state.ivapert}></input>\n                  </div>\n            <div >\n              <label>valor mas alto (high):</label>\n\n            <input value={this.state.ivhigh}></input> </div>\n            <div><label> valor mas bajo (low):</label>\n            <input value={this.state.ivlow}></input> </div>\n            <div><label>valor de cierre (close):</label><input value={this.state.ivclose}></input></div>\n            <div><label>porcentual:</label><input value={this.state.ivporc}></input></div>\n            <div><label>monto direncial:</label><input value={this.state.imontodif}></input></div>\n         </div>\n          \n          {/* <div>\n            <label >\"por favor, avisen de esta limitacion. me volvi loco en el testing de performance! :)\n            Thank you for using Alpha Vantage! Our standard API call frequency is 5 calls per minute and 500 calls per day. Please visit https://www.alphavantage.co/premium/ if you would like to target a higher API call frequency.\"</label>\n          </div> */}\n      \n               </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}